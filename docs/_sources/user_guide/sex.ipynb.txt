{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predict Sex\n",
    "\n",
    "This notebook goes through a simple binary classification example, explaining general library functionality along the way.\n",
    "Within this notebook we make use of data downloaded from Release 2.0.1 of the the ABCD Study (https://abcdstudy.org/).\n",
    "This dataset is openly available to researchers (after signing a data use agreement) and is particularly well suited\n",
    "towards performing neuroimaging based ML given the large sample size of the study.\n",
    "\n",
    "Within this notebook we will be performing binary classification predicting sex assigned at birth from tabular ROI structural MRI data.\n",
    "\n",
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import BPt as bp\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "from warnings import simplefilter\n",
    "from sklearn.exceptions import ConvergenceWarning\n",
    "simplefilter(\"ignore\", category=ConvergenceWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_from_rds(names, eventname='baseline_year_1_arm_1'):\n",
    "    \n",
    "    data = pd.read_csv('data/nda_rds_201.csv',\n",
    "                       usecols=['src_subject_id', 'eventname'] + names,\n",
    "                       na_values=['777', 999, '999', 777])\n",
    "    \n",
    "    data = data.loc[data[data['eventname'] == eventname].index]\n",
    "    data = data.set_index('src_subject_id')\n",
    "    data = data.drop('eventname', axis=1)\n",
    "    \n",
    "    # Obsificate subject ID for public example\n",
    "    data.index = list(range(len(data)))\n",
    "    \n",
    "    # Return as pandas DataFrame cast to BPt Dataset\n",
    "    return bp.Dataset(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This way we can look at all column avaliable\n",
    "all_cols = list(pd.read_csv('data/nda_rds_201.csv', nrows=0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can search through all column to find which columns we actually want to load. We will start with the brain imaging features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['smri_thick_cort.destrieux_g.and.s.frontomargin.lh',\n",
       " 'smri_thick_cort.destrieux_g.and.s.occipital.inf.lh',\n",
       " 'smri_thick_cort.destrieux_g.and.s.paracentral.lh',\n",
       " 'smri_thick_cort.destrieux_g.and.s.subcentral.lh',\n",
       " 'smri_thick_cort.destrieux_g.and.s.transv.frontopol.lh',\n",
       " 'smri_thick_cort.destrieux_g.and.s.cingul.ant.lh',\n",
       " 'smri_thick_cort.destrieux_g.and.s.cingul.mid.ant.lh',\n",
       " 'smri_thick_cort.destrieux_g.and.s.cingul.mid.post.lh',\n",
       " 'smri_thick_cort.destrieux_g.cingul.post.dorsal.lh',\n",
       " 'smri_thick_cort.destrieux_g.cingul.post.ventral.lh']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_keys = {'thick': 'smri_thick_cort.destrieux_g.',\n",
    "             'sulc': 'smri_sulc_cort.destrieux_g.',\n",
    "             'area': 'smri_area_cort.destrieux_g.',\n",
    "             'subcort': 'smri_vol_subcort.aseg_'}\n",
    "\n",
    "feat_cols = {key: [c for c in all_cols if feat_keys[key] in c] for key in feat_keys}\n",
    "all_cols = sum(feat_cols.values(), [])\n",
    "\n",
    "# For example\n",
    "feat_cols['thick'][:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also need our target variable, in this case sex.\n",
    "\n",
    "Let's load household income too as a non input, i.e., a variable we won't use directly as input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "target = 'sex'\n",
    "non_inputs = ['household.income']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/sage/anaconda3/envs/bpt/lib/python3.9/site-packages/IPython/core/interactiveshell.py:3338: DtypeWarning: Columns (63641) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  if (await self.run_code(code, result,  async_=asy)):\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div style=\"float: left; padding: 10px;\">\n",
       "        <h3>Data</h3><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>household.income</th>\n",
       "      <th>sex</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.ant.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.ant.rh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.ant.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.ant.rh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.post.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.post.rh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.frontomargin.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.frontomargin.rh</th>\n",
       "      <th>...</th>\n",
       "      <th>smri_vol_subcort.aseg_subcorticalgrayvolume</th>\n",
       "      <th>smri_vol_subcort.aseg_supratentorialvolume</th>\n",
       "      <th>smri_vol_subcort.aseg_thalamus.proper.lh</th>\n",
       "      <th>smri_vol_subcort.aseg_thalamus.proper.rh</th>\n",
       "      <th>smri_vol_subcort.aseg_ventraldc.lh</th>\n",
       "      <th>smri_vol_subcort.aseg_ventraldc.rh</th>\n",
       "      <th>smri_vol_subcort.aseg_wholebrain</th>\n",
       "      <th>smri_vol_subcort.aseg_wm.hypointensities</th>\n",
       "      <th>smri_vol_subcort.aseg_wm.hypointensities.lh</th>\n",
       "      <th>smri_vol_subcort.aseg_wm.hypointensities.rh</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[&gt;=50K &amp; &lt;100K]</td>\n",
       "      <td>F</td>\n",
       "      <td>1540.0</td>\n",
       "      <td>1921.0</td>\n",
       "      <td>1237.0</td>\n",
       "      <td>1211.0</td>\n",
       "      <td>939.0</td>\n",
       "      <td>1022.0</td>\n",
       "      <td>872.0</td>\n",
       "      <td>596.0</td>\n",
       "      <td>...</td>\n",
       "      <td>54112.0</td>\n",
       "      <td>9.738411e+05</td>\n",
       "      <td>6980.4</td>\n",
       "      <td>6806.6</td>\n",
       "      <td>3448.1</td>\n",
       "      <td>3372.7</td>\n",
       "      <td>1.099494e+06</td>\n",
       "      <td>2201.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>F</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[&gt;=100K]</td>\n",
       "      <td>M</td>\n",
       "      <td>2108.0</td>\n",
       "      <td>2583.0</td>\n",
       "      <td>1289.0</td>\n",
       "      <td>1295.0</td>\n",
       "      <td>1066.0</td>\n",
       "      <td>1328.0</td>\n",
       "      <td>907.0</td>\n",
       "      <td>843.0</td>\n",
       "      <td>...</td>\n",
       "      <td>71188.0</td>\n",
       "      <td>1.290405e+06</td>\n",
       "      <td>9091.3</td>\n",
       "      <td>8105.3</td>\n",
       "      <td>5058.5</td>\n",
       "      <td>5261.6</td>\n",
       "      <td>1.444690e+06</td>\n",
       "      <td>1254.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[&gt;=100K]</td>\n",
       "      <td>M</td>\n",
       "      <td>2196.0</td>\n",
       "      <td>2266.0</td>\n",
       "      <td>1012.0</td>\n",
       "      <td>1459.0</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>1398.0</td>\n",
       "      <td>944.0</td>\n",
       "      <td>924.0</td>\n",
       "      <td>...</td>\n",
       "      <td>61985.0</td>\n",
       "      <td>1.283405e+06</td>\n",
       "      <td>7470.7</td>\n",
       "      <td>7278.4</td>\n",
       "      <td>3924.8</td>\n",
       "      <td>3983.6</td>\n",
       "      <td>1.421171e+06</td>\n",
       "      <td>950.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[&lt;50K]</td>\n",
       "      <td>M</td>\n",
       "      <td>1732.0</td>\n",
       "      <td>1936.0</td>\n",
       "      <td>1024.0</td>\n",
       "      <td>916.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>1002.0</td>\n",
       "      <td>863.0</td>\n",
       "      <td>730.0</td>\n",
       "      <td>...</td>\n",
       "      <td>61855.0</td>\n",
       "      <td>1.072113e+06</td>\n",
       "      <td>8152.9</td>\n",
       "      <td>7436.8</td>\n",
       "      <td>4085.2</td>\n",
       "      <td>4129.3</td>\n",
       "      <td>1.186497e+06</td>\n",
       "      <td>789.9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11870</th>\n",
       "      <td>[&gt;=100K]</td>\n",
       "      <td>M</td>\n",
       "      <td>1583.0</td>\n",
       "      <td>1821.0</td>\n",
       "      <td>730.0</td>\n",
       "      <td>1040.0</td>\n",
       "      <td>709.0</td>\n",
       "      <td>872.0</td>\n",
       "      <td>938.0</td>\n",
       "      <td>745.0</td>\n",
       "      <td>...</td>\n",
       "      <td>59550.0</td>\n",
       "      <td>1.001272e+06</td>\n",
       "      <td>7993.5</td>\n",
       "      <td>7239.5</td>\n",
       "      <td>3899.4</td>\n",
       "      <td>4024.6</td>\n",
       "      <td>1.139532e+06</td>\n",
       "      <td>651.7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11871</th>\n",
       "      <td>[&gt;=100K]</td>\n",
       "      <td>F</td>\n",
       "      <td>1603.0</td>\n",
       "      <td>1841.0</td>\n",
       "      <td>899.0</td>\n",
       "      <td>1091.0</td>\n",
       "      <td>990.0</td>\n",
       "      <td>995.0</td>\n",
       "      <td>809.0</td>\n",
       "      <td>666.0</td>\n",
       "      <td>...</td>\n",
       "      <td>61090.0</td>\n",
       "      <td>9.897016e+05</td>\n",
       "      <td>7113.5</td>\n",
       "      <td>6835.3</td>\n",
       "      <td>4029.6</td>\n",
       "      <td>3826.0</td>\n",
       "      <td>1.134203e+06</td>\n",
       "      <td>2304.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11872</th>\n",
       "      <td>[&gt;=100K]</td>\n",
       "      <td>F</td>\n",
       "      <td>1862.0</td>\n",
       "      <td>2245.0</td>\n",
       "      <td>1406.0</td>\n",
       "      <td>1502.0</td>\n",
       "      <td>882.0</td>\n",
       "      <td>1279.0</td>\n",
       "      <td>1105.0</td>\n",
       "      <td>1015.0</td>\n",
       "      <td>...</td>\n",
       "      <td>64413.0</td>\n",
       "      <td>1.172208e+06</td>\n",
       "      <td>8123.0</td>\n",
       "      <td>7947.6</td>\n",
       "      <td>3893.0</td>\n",
       "      <td>4428.5</td>\n",
       "      <td>1.301402e+06</td>\n",
       "      <td>1654.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11873</th>\n",
       "      <td>[&lt;50K]</td>\n",
       "      <td>F</td>\n",
       "      <td>1803.0</td>\n",
       "      <td>1888.0</td>\n",
       "      <td>967.0</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>866.0</td>\n",
       "      <td>1128.0</td>\n",
       "      <td>1040.0</td>\n",
       "      <td>642.0</td>\n",
       "      <td>...</td>\n",
       "      <td>55505.0</td>\n",
       "      <td>1.040864e+06</td>\n",
       "      <td>6923.8</td>\n",
       "      <td>6459.8</td>\n",
       "      <td>3502.5</td>\n",
       "      <td>3674.0</td>\n",
       "      <td>1.150473e+06</td>\n",
       "      <td>1209.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11874</th>\n",
       "      <td>[&gt;=50K &amp; &lt;100K]</td>\n",
       "      <td>F</td>\n",
       "      <td>1957.0</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>1142.0</td>\n",
       "      <td>1102.0</td>\n",
       "      <td>1144.0</td>\n",
       "      <td>1130.0</td>\n",
       "      <td>884.0</td>\n",
       "      <td>638.0</td>\n",
       "      <td>...</td>\n",
       "      <td>59816.0</td>\n",
       "      <td>1.079887e+06</td>\n",
       "      <td>7665.4</td>\n",
       "      <td>5959.4</td>\n",
       "      <td>3736.0</td>\n",
       "      <td>4060.7</td>\n",
       "      <td>1.214126e+06</td>\n",
       "      <td>1321.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11875 rows × 274 columns</p>\n",
       "</div></div>\n"
      ],
      "text/plain": [
       "       smri_thick_cort.destrieux_g.and.s.frontomargin.lh  \\\n",
       "0                                                  2.643   \n",
       "1                                                    NaN   \n",
       "2                                                  2.798   \n",
       "3                                                  2.570   \n",
       "4                                                  2.589   \n",
       "...                                                  ...   \n",
       "11870                                              2.604   \n",
       "11871                                              2.665   \n",
       "11872                                              2.517   \n",
       "11873                                              2.806   \n",
       "11874                                              2.817   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.occipital.inf.lh  \\\n",
       "0                                                  2.597    \n",
       "1                                                    NaN    \n",
       "2                                                  2.635    \n",
       "3                                                  3.008    \n",
       "4                                                  2.495    \n",
       "...                                                  ...    \n",
       "11870                                              2.839    \n",
       "11871                                              2.915    \n",
       "11872                                              2.743    \n",
       "11873                                              2.835    \n",
       "11874                                              2.267    \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.paracentral.lh  \\\n",
       "0                                                 2.682   \n",
       "1                                                   NaN   \n",
       "2                                                 2.620   \n",
       "3                                                 2.771   \n",
       "4                                                 2.732   \n",
       "...                                                 ...   \n",
       "11870                                             2.642   \n",
       "11871                                             2.661   \n",
       "11872                                             2.607   \n",
       "11873                                             2.678   \n",
       "11874                                             2.639   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.subcentral.lh  \\\n",
       "0                                                3.016   \n",
       "1                                                  NaN   \n",
       "2                                                2.963   \n",
       "3                                                3.116   \n",
       "4                                                2.982   \n",
       "...                                                ...   \n",
       "11870                                            3.017   \n",
       "11871                                            3.114   \n",
       "11872                                            3.210   \n",
       "11873                                            3.344   \n",
       "11874                                            2.805   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.transv.frontopol.lh  \\\n",
       "0                                                  2.776       \n",
       "1                                                    NaN       \n",
       "2                                                  3.038       \n",
       "3                                                  2.753       \n",
       "4                                                  2.979       \n",
       "...                                                  ...       \n",
       "11870                                              2.990       \n",
       "11871                                              2.968       \n",
       "11872                                              2.847       \n",
       "11873                                              2.975       \n",
       "11874                                              3.041       \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.cingul.ant.lh  \\\n",
       "0                                                3.012   \n",
       "1                                                  NaN   \n",
       "2                                                2.948   \n",
       "3                                                3.137   \n",
       "4                                                2.953   \n",
       "...                                                ...   \n",
       "11870                                            3.119   \n",
       "11871                                            3.167   \n",
       "11872                                            2.954   \n",
       "11873                                            3.134   \n",
       "11874                                            2.867   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.cingul.mid.ant.lh  \\\n",
       "0                                                  2.894     \n",
       "1                                                    NaN     \n",
       "2                                                  2.966     \n",
       "3                                                  3.222     \n",
       "4                                                  2.732     \n",
       "...                                                  ...     \n",
       "11870                                              3.014     \n",
       "11871                                              3.058     \n",
       "11872                                              2.965     \n",
       "11873                                              3.425     \n",
       "11874                                              2.906     \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.cingul.mid.post.lh  \\\n",
       "0                                                  2.874      \n",
       "1                                                    NaN      \n",
       "2                                                  2.728      \n",
       "3                                                  3.062      \n",
       "4                                                  2.819      \n",
       "...                                                  ...      \n",
       "11870                                              2.871      \n",
       "11871                                              2.976      \n",
       "11872                                              2.846      \n",
       "11873                                              3.251      \n",
       "11874                                              3.049      \n",
       "\n",
       "       smri_thick_cort.destrieux_g.cingul.post.dorsal.lh  \\\n",
       "0                                                  2.865   \n",
       "1                                                    NaN   \n",
       "2                                                  3.263   \n",
       "3                                                  3.315   \n",
       "4                                                  2.908   \n",
       "...                                                  ...   \n",
       "11870                                              3.240   \n",
       "11871                                              3.355   \n",
       "11872                                              3.211   \n",
       "11873                                              3.288   \n",
       "11874                                              3.440   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.cingul.post.ventral.lh  ...  \\\n",
       "0                                                  2.350   ...   \n",
       "1                                                    NaN   ...   \n",
       "2                                                  1.882   ...   \n",
       "3                                                  3.065   ...   \n",
       "4                                                  2.967   ...   \n",
       "...                                                  ...   ...   \n",
       "11870                                              2.254   ...   \n",
       "11871                                              2.168   ...   \n",
       "11872                                              2.741   ...   \n",
       "11873                                              2.535   ...   \n",
       "11874                                              2.123   ...   \n",
       "\n",
       "       smri_vol_subcort.aseg_cc.mid.anterior  \\\n",
       "0                                      396.9   \n",
       "1                                        NaN   \n",
       "2                                      336.7   \n",
       "3                                      432.3   \n",
       "4                                      398.6   \n",
       "...                                      ...   \n",
       "11870                                  366.9   \n",
       "11871                                  367.8   \n",
       "11872                                  472.6   \n",
       "11873                                  424.1   \n",
       "11874                                  417.5   \n",
       "\n",
       "       smri_vol_subcort.aseg_cc.anterior  smri_vol_subcort.aseg_wholebrain  \\\n",
       "0                                  546.9                      1.099494e+06   \n",
       "1                                    NaN                               NaN   \n",
       "2                                  684.0                      1.444690e+06   \n",
       "3                                  720.6                      1.421171e+06   \n",
       "4                                  824.5                      1.186497e+06   \n",
       "...                                  ...                               ...   \n",
       "11870                              761.9                      1.139532e+06   \n",
       "11871                              609.3                      1.134203e+06   \n",
       "11872                              855.6                      1.301402e+06   \n",
       "11873                              691.2                      1.150473e+06   \n",
       "11874                              863.2                      1.214126e+06   \n",
       "\n",
       "       smri_vol_subcort.aseg_latventricles  \\\n",
       "0                                   4693.2   \n",
       "1                                      NaN   \n",
       "2                                  13426.2   \n",
       "3                                   8375.3   \n",
       "4                                  19138.9   \n",
       "...                                    ...   \n",
       "11870                              11129.1   \n",
       "11871                               2855.1   \n",
       "11872                               8278.4   \n",
       "11873                               6483.5   \n",
       "11874                               9234.5   \n",
       "\n",
       "       smri_vol_subcort.aseg_allventricles  \\\n",
       "0                                   6299.4   \n",
       "1                                      NaN   \n",
       "2                                  18810.3   \n",
       "3                                  11828.6   \n",
       "4                                  21191.9   \n",
       "...                                    ...   \n",
       "11870                              14259.9   \n",
       "11871                               4925.1   \n",
       "11872                              10434.1   \n",
       "11873                               8978.0   \n",
       "11874                              11169.3   \n",
       "\n",
       "       smri_vol_subcort.aseg_intracranialvolume  \\\n",
       "0                                  1.354788e+06   \n",
       "1                                           NaN   \n",
       "2                                  1.703982e+06   \n",
       "3                                  1.679526e+06   \n",
       "4                                  1.561216e+06   \n",
       "...                                         ...   \n",
       "11870                              1.480336e+06   \n",
       "11871                              1.470497e+06   \n",
       "11872                              1.455727e+06   \n",
       "11873                              1.480286e+06   \n",
       "11874                              1.500072e+06   \n",
       "\n",
       "       smri_vol_subcort.aseg_supratentorialvolume  \\\n",
       "0                                    9.738411e+05   \n",
       "1                                             NaN   \n",
       "2                                    1.290405e+06   \n",
       "3                                    1.283405e+06   \n",
       "4                                    1.072113e+06   \n",
       "...                                           ...   \n",
       "11870                                1.001272e+06   \n",
       "11871                                9.897016e+05   \n",
       "11872                                1.172208e+06   \n",
       "11873                                1.040864e+06   \n",
       "11874                                1.079887e+06   \n",
       "\n",
       "       smri_vol_subcort.aseg_subcorticalgrayvolume  sex  household.income  \n",
       "0                                          54112.0    F   [>=50K & <100K]  \n",
       "1                                              NaN    F               NaN  \n",
       "2                                          71188.0    M          [>=100K]  \n",
       "3                                          61985.0    M          [>=100K]  \n",
       "4                                          61855.0    M            [<50K]  \n",
       "...                                            ...  ...               ...  \n",
       "11870                                      59550.0    M          [>=100K]  \n",
       "11871                                      61090.0    F          [>=100K]  \n",
       "11872                                      64413.0    F          [>=100K]  \n",
       "11873                                      55505.0    F            [<50K]  \n",
       "11874                                      59816.0    F   [>=50K & <100K]  \n",
       "\n",
       "[11875 rows x 274 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = load_from_rds(all_cols + [target] + non_inputs )\n",
    "data.verbose = 1\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we need to tell the dataset a few things about sex, namely that it is a binary variable, and that it is our target variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"float: left; padding: 10px;\">\n",
       "        <h3>Target</h3><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11870</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11871</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11872</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11873</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11874</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11875 rows × 1 columns</p>\n",
       "</div></div>\n"
      ],
      "text/plain": [
       "      sex\n",
       "0       0\n",
       "1       0\n",
       "2       1\n",
       "3       1\n",
       "4       1\n",
       "...    ..\n",
       "11870   1\n",
       "11871   0\n",
       "11872   0\n",
       "11873   0\n",
       "11874   0\n",
       "\n",
       "[11875 rows x 1 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.to_binary('sex', inplace=True)\n",
    "data.set_target('sex', inplace=True)\n",
    "data['target']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to do something simillar for household income, tell it that it is a categorical variable, and has role non input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropped 1018 Rows\n"
     ]
    }
   ],
   "source": [
    "data = data.ordinalize('household.income').set_role('household.income', 'non input')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at some NaN info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded NaN Info:\n",
      "There are: 83896 total missing values\n",
      "224 columns found with 304 missing values (column name overlap: ['cort.', 'smri_'])\n",
      "9 columns found with 305 missing values (column name overlap: ['cort.', 'smri_'])\n",
      "3 columns found with 408 missing values (column name overlap: ['smri_vol_subcort.aseg_', 'le'])\n",
      "3 columns found with 349 missing values (column name overlap: ['smri_area_cort.destrieux_g.', 'ar', 'd.'])\n",
      "3 columns found with 306 missing values (column name overlap: ['smri_area_cort.destrieux_g.'])\n",
      "2 columns found with 340 missing values (column name overlap: ['smri_area_cort.destrieux_g.', '.lh', '.s', 'an', 'l.'])\n",
      "2 columns found with 324 missing values (column name overlap: ['smri_area_cort.destrieux_g.and.s.cingul.mid.', 't.rh'])\n",
      "2 columns found with 314 missing values (column name overlap: ['smri_area_cort.destrieux_g.', 'temp.', '.lat'])\n",
      "2 columns found with 309 missing values (column name overlap: ['smri_vol_subcort.aseg_c'])\n",
      "2 columns found with 307 missing values (column name overlap: ['smri_area_cort.destrieux_g.'])\n",
      "2 columns found with 345 missing values (column name overlap: ['smri_area_cort.destrieux_g.', 'ngul.', 't.'])\n",
      "2 columns found with 347 missing values (column name overlap: ['smri_area_cort.destrieux_g.', '.rh', 'ar', 'nt', 'er'])\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data.nan_info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What happens now if we drop any subjects with more than 1% of their loaded columns with NaN values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Setting NaN threshold to: 2.74\n",
      "Dropped 408 Rows\n",
      "Loaded NaN Info:\n",
      "There are: 885 total missing values\n",
      "9 columns found with 1 missing values (column name overlap: ['cort.', 'smri_'])\n",
      "3 columns found with 2 missing values (column name overlap: ['smri_area_cort.destrieux_g.'])\n",
      "3 columns found with 38 missing values (column name overlap: ['smri_area_cort.destrieux_g.'])\n",
      "3 columns found with 3 missing values (column name overlap: [])\n",
      "3 columns found with 45 missing values (column name overlap: ['smri_area_cort.destrieux_g.', 'ar', 'd.'])\n",
      "2 columns found with 43 missing values (column name overlap: ['smri_area_cort.destrieux_g.', '.rh', 'ar', 'nt', 'er'])\n",
      "2 columns found with 41 missing values (column name overlap: ['smri_area_cort.destrieux_g.', 'ngul.', 't.'])\n",
      "2 columns found with 35 missing values (column name overlap: ['smri_area_cort.destrieux_g.', '.lh', '.s', 'an'])\n",
      "2 columns found with 5 missing values (column name overlap: ['smri_vol_subcort.aseg_c'])\n",
      "2 columns found with 10 missing values (column name overlap: ['smri_area_cort.destrieux_g.', 'temp.', '.lat'])\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data = data.drop_subjects_by_nan(threshold=.01)\n",
    "data.nan_info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That greatly reduces the number of remaining missing values we have. Next, let's consider outlier filtering as..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "smri_thick_cort.destrieux_g.front.middle.rh          -1.492846\n",
       "smri_thick_cort.destrieux_g.temporal.middle.lh       -1.311317\n",
       "smri_thick_cort.destrieux_g.pariet.inf.angular.rh    -1.284709\n",
       "smri_thick_cort.destrieux_g.precentral.rh            -1.269309\n",
       "smri_thick_cort.destrieux_g.temporal.middle.rh       -1.238609\n",
       "                                                       ...    \n",
       "smri_vol_subcort.aseg_latventricles                   4.022606\n",
       "smri_vol_subcort.aseg_lateral.ventricle.rh            4.504116\n",
       "smri_area_cort.destrieux_g.cingul.post.ventral.lh     5.093452\n",
       "smri_area_cort.destrieux_g.cingul.post.ventral.rh     5.106974\n",
       "smri_vol_subcort.aseg_wm.hypointensities             16.605102\n",
       "Length: 272, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.skew().sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropped 3 Columns\n"
     ]
    }
   ],
   "source": [
    "# We don't even care about these measurements\n",
    "data = data.drop_cols(exclusions='aseg_wm.hypointensities')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropped 53 Rows\n"
     ]
    }
   ],
   "source": [
    "data = data.filter_outliers_by_std(n_std=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sex: 10393 rows (3 NaN)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAW4AAAF+CAYAAACidPAUAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVJUlEQVR4nO3de7RmdX3f8fcHhvsgNwURRC5ekFKkhNQbGrwQ0UaN1ioUI7Yag6auGtuFEBMiiVkN0Rq1sUVsjbagiE1YErwg4aKJqxmcMVyjhNsY5ZrRIBcRYfj2j/075OFwzpxnZJ5zzu+Z92uts87ev73P3t/fzDOf+Z3fs5+9U1VIkvqxxVIXIEnaOAa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5NvST7JLknyZab6HinJ/nttnxkku9viuO2470gybWb6niaTga3upbkzUnWt2C+J8lNSf4kydNn9qmqv6+qlVW1foxj/dVC56yqE6rq9zZR/ZXkqSPH/suqesamOLaml8GtafD/qmolsBPwUuA+YE2Sgzf1iTbVqF16LAxuTVSS9yS5OcndSa5N8pLWvkWSk5LckOQHSc5Jsmvb9j+S/OnIMU5LclGSbOhcVbW+qm6oqncAXwPe135+3zayXdHW35zkxlbTTUmOS/JM4HTguW3kfmfb91Otni8luRd4UWt7/6x+/maSdUnWJjlupP3SJG8dWX94VJ/k6635inbON8yeeknyzHaMO5Nck+RVI9s+leRjSb7Y+rIqyQHj/t2oXwa3JibJM4D/APx8Ve0IvAxY2za/E/hl4BeAJwH/CHysbftPwD9vIfcC4C3A8bVx92f4M+AFc9S0A/BR4OWtpucBl1fVt4ETaKP3qtp55Mf+LfD7wI7AXFMpTwQeD+wFHA+c0fq+QVX1wrb4rHbOz82qdSvgz4GvArsz/JmdNevYxwCnArsA17c6NeUMbk3SemAb4KAkW1XV2qq6oW07AXhvVX2/qu5nGB2/LsmKqvox8CvAh4AzgXdW1ca+AXgLsOs82x4CDk6yXVXdWlXXLHCsL1TVN6rqoar6yTz7/HZV3V9VXwO+CLx+I+udy3OAlcAfVNVPq+pi4Hzg2JF9zq2qy6rqQeAs4NBNcF4tcwa3JqaqrgfexRDKdyQ5O8mT2uanAOe2KYA7gW8zBP0e7WdXATcCAc75GU6/F/DDOWq6F3gDw38ct7ZphgMXONb3Ftj+j+24M77L8FvEY/Uk4HtV9dCsY+81sn7byPKPGYJeU87g1kRV1Weq6giGoC7gtLbpewzTFTuPfG1bVTcDJPl1htH6LcCJP8OpXwP85Tw1XVBVRwF7At8BPjGzab5uLHCuXdoUzIx9GOoGuBfYfmTbExc41qhbgCcnGf13ug9w80YcQ1PI4NbEJHlGkhcn2Qb4CcPVHjOjx9OB30/ylLbvE5K8ui0/HXg/8EaGKZMTkxw6xvm2TLJfkv8GHMkw9zt7nz2SvLoF7f3APSM13Q7snWTrn6G7pybZus3J/xLw+dZ+OfDaJNu3y/7eMuvnbgf2n+eYqxhG0Scm2SrJkcArgbN/hvo0RQxuTdI2wB8A6xh+pd8dOLlt+whwHvDVJHcDfw08u135cSZwWlVdUVXXAb8J/J/2H8BcnpvkHuAu4FLgcQxviF41x75bAO9mGM3+kOHN0be3bRcD1wC3JVm3Ef28jeHN1VsY5plPqKrvtG1/BPyUIaA/3baPeh/w6TZl9Ih58ar6KUNQv5zhz/C/A28aObY2U/FBCpLUF0fcktQZg1uSOmNwS1JnDG5J6syKpS5gLkcffXR95StfWeoyJGmpzXl/nmU54l63bmOuxJKkzcuyDG5J0vwMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4sy4cF7/DE/erAXzl1qcuQpMdkzQfe9FgP0c/9uCVJ8zO4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktSZiQV3kkpy5sj6iiT/kOT8SZ1TkjYHkxxx3wscnGS7tn4UcPMEzydJm4VJT5V8CfhXbflY4LMTPp8kTb1JB/fZwDFJtgUOAVbNt2OStyVZnWT1gz++e8JlSVK/JhrcVXUlsC/DaPtLC+x7RlUdXlWHr9h+x0mWJUldW7EI5zgP+CBwJLDbIpxPkqbaYgT3J4E7q+qqJEcuwvkkaapNPLir6vvARyd9HknaXEwsuKtq5RxtlwKXTuqckrQ58JOTktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOrPRwZ1klySHTKIYSdLCxgruJJcmeVySXYFvAZ9I8qHJliZJmsu4I+6dquou4LXA/66qZwMvnVxZkqT5jBvcK5LsCbweOH+C9UiSFjBucP8ucAFwQ1V9M8n+wHWTK0uSNJ8V4+xUVZ8HPj+yfiPwrydVlCRpfuO+Ofn0JBclubqtH5LktyZbmiRpLuNOlXwCOBl4AKCqrgSOmVRRkqT5jTVVAmxfVZclGW17cAL1APDMvXdj9QfeNKnDS1LXxh1xr0tyAFAASV4H3DqxqiRJ8xp3xP3rwBnAgUluBm4C3jixqiRJ8xr3qpIbgZcm2QHYoqrunmxZkqT5bDC4k7yxqs5M8u5Z7QBUlR97l6RFttCIe4f2fcdJFyJJGs8Gg7uqPp5kS+CuqvqjRapJkrQBC15VUlXrgWMXoRZJ0hjGvarkG0n+GPgccO9MY1V9ayJVSZLmNW5wH9q+/+5IWwEv3qTVSJIWNO7lgC+adCGSpPGMe5OpnZJ8KMnq9vVfk+w06eIkSY827kfePwnczfAghdcDdwF/MqmiJEnzG3eO+4CqGr3/9qlJLp9APZKkBYw74r4vyREzK0meD9w3mZIkSRsy7oj77cCn27x2gB8Cb55UUZKk+Y17VcnlwLOSPK6t3zXJoiRJ8xsruOe5ydSPgDUt1CVJi2TcOe7DgROAvdrXrwFHA59IcuKEapMkzWHcOe69gcOq6h6AJL8DfBF4IbAG+MPJlCdJmm3cEffuwP0j6w8Ae1TVfbPaJUkTNu6I+yxgVZIvtPVXAp9pT8T524lUJkma07hXlfxeki8Dz29NJ1TV6rZ83EQqkyTNadypEoBtGR6o8BHgu0n2m1BNkqQNGPcmU78DvAc4uTVtBZw5qaIkSfMbd8T9GuBVtIcoVNUt+BxKSVoS4wb3T6uqGB6eQHtTUpK0BMYN7nOSfBzYOcmvAn8B/M/JlSVJms+4V5V8MMlRDPfhfgZwSlVdONHKJElzGvdeJadV1XuAC+dokyQtonGnSo6ao+3lm7IQSdJ4NjjiTvJ24B3A/kmuHNm0I/CNSRYmSZpbhotF5tk4PDhhF+C/ACeNbLq7qn44qaIO2Wu7Ov/Xnjqpw0vazO1zylVLXcK4MlfjBkfcVfUjhvtuHwuQZHeGT1CuTLKyqv5+U1cpSdqwcT85+cok1wE3AV8D1gJfnmBdkqR5jPvm5PuB5wB/V1X7AS8B/npiVUmS5jVucD9QVT8AtkiyRVVdwvBUHEnSIhv3ftx3JlkJfB04K8kdtPuWSJIW10KXAz4V2AN4NXAf8BsM999+CvDOiVcnSXqUhaZKPsxwD+57q+qhqnqwqj4NnAu8b9LFSZIebaHg3qOqHnXBY2vbdyIVSZI2aKHg3nkD27bbhHVIksa0UHCvbrdxfYQkbwXWTKYkSdKGLHRVybuAc5Mcxz8F9eHA1gxPxZEkLbKFPvJ+O/C8JC8CDm7NX6yqiydemSRpTuM+SOES4JIJ1yJJGsO4n5yUJC0TBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSerMisU4SZL1wFUjTb9cVWsX49ySNG0WJbiB+6rq0EU6lyRNNadKJKkzizXi3i7J5W35pqp6zewdkrwNeBvAXjtttUhlSVJ/ls1USVWdAZwBcMhe29ViFCVJPXKqRJI6Y3BLUmcMbknqzKIEd1WtXIzzSNLmwBG3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUGYNbkjpjcEtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1JnDG5J6ozBLUmdMbglqTMGtyR1xuCWpM4Y3JLUmRVLXcBctt7zn7HPKauXugxJWpYccUtSZwxuSeqMwS1JnTG4JakzBrckdcbglqTOGNyS1BmDW5I6Y3BLUmcMbknqjMEtSZ0xuCWpMwa3JHXG4JakzhjcktSZVNVS1/AoSe4Grl3qOibo8cC6pS5iwuxj/6a9f7D8+7iuqo6e3bgsH6QAXFtVhy91EZOSZPU09w/s4zSY9v5Bv310qkSSOmNwS1Jnlmtwn7HUBUzYtPcP7OM0mPb+Qad9XJZvTkqS5rdcR9ySpHkY3JLUmWUV3EmOTnJtkuuTnLTU9WyMJJ9MckeSq0fadk1yYZLr2vddWnuSfLT188okh438zPFt/+uSHL8UfZlLkicnuSTJ3ya5Jsl/bO3T1Mdtk1yW5IrWx1Nb+35JVrW+fC7J1q19m7Z+fdu+78ixTm7t1yZ52RJ1aU5JtkzyN0nOb+vT1r+1Sa5KcnmS1a1tal6nAFTVsvgCtgRuAPYHtgauAA5a6ro2ov4XAocBV4+0/SFwUls+CTitLb8C+DIQ4DnAqta+K3Bj+75LW95lqfvWatsTOKwt7wj8HXDQlPUxwMq2vBWwqtV+DnBMaz8deHtbfgdwels+BvhcWz6ovX63AfZrr+stl7p/I/18N/AZ4Py2Pm39Wws8flbb1LxOq2pZBfdzgQtG1k8GTl7qujayD/vOCu5rgT3b8p4MHywC+Dhw7Oz9gGOBj4+0P2K/5fQFfAE4alr7CGwPfAt4NsMn61a09odfp8AFwHPb8oq2X2a/dkf3W+ovYG/gIuDFwPmt3qnpX6tnruCeqtfpcpoq2Qv43sj691tbz/aoqlvb8m3AHm15vr528WfQfmX+Fwwj0qnqY5tGuBy4A7iQYTR5Z1U92HYZrffhvrTtPwJ2Y3n38cPAicBDbX03pqt/AAV8NcmaJG9rbVP1Ol2uH3mfOlVVSbq/9jLJSuBPgXdV1V1JHt42DX2sqvXAoUl2Bs4FDlzaijadJL8E3FFVa5IcucTlTNIRVXVzkt2BC5N8Z3TjNLxOl9OI+2bgySPre7e2nt2eZE+A9v2O1j5fX5f1n0GSrRhC+6yq+rPWPFV9nFFVdwKXMEwd7JxkZpAzWu/DfWnbdwJ+wPLt4/OBVyVZC5zNMF3yEaanfwBU1c3t+x0M//n+S6bsdbqcgvubwNPaO9xbM7wZct4S1/RYnQfMvBt9PMO88Ez7m9o72s8BftR+jbsA+MUku7R3vX+xtS25DEPr/wV8u6o+NLJpmvr4hDbSJsl2DHP432YI8Ne13Wb3cabvrwMurmFC9DzgmHZVxn7A04DLFqUTG1BVJ1fV3lW1L8O/r4ur6jimpH8ASXZIsuPMMsPr62qm6HUKLJ83J9sbAK9guFrhBuC9S13PRtb+WeBW4AGG+bC3MMwHXgRcB/wFsGvbN8DHWj+vAg4fOc6/B65vX/9uqfs1UtcRDHOHVwKXt69XTFkfDwH+pvXxauCU1r4/QzBdD3we2Ka1b9vWr2/b9x851ntb368FXr7UfZujr0fyT1eVTE3/Wl+uaF/XzOTINL1Oq8qPvEtSb5bTVIkkaQwGtyR1xuCWpM4Y3JLUGYNbkjpjcGsqJXlikrOT3NA++vylJE/fhMc/MsnzNtXxpI1hcGvqtA8LnQtcWlUHVNXPMdwYaY8N/+RGORIwuLUkDG5NoxcBD1TV6TMNVXUF8FdJPpDk6na/5jfAw6Pn82f2TfLHSd7cltcmOTXJt9rPHNhusnUC8Bvtns8vSPJv2nGvSPL1xeysNj/eZErT6GBgzRztrwUOBZ4FPB745pghu66qDkvyDuA/V9Vbk5wO3FNVHwRIchXwshpubrTzpuiENB9H3NqcHAF8tqrWV9XtwNeAnx/j52ZuqLWG4Z7rc/kG8Kkkv8rwUBBpYgxuTaNrgJ/biP0f5JH/Fradtf3+9n098/yWWlUnAL/FcEe5NUl224jzSxvF4NY0uhjYZuQm+iQ5BLgTeEN7WMITGB43dxnwXeCgdre7nYGXjHGOuxke4TZz/AOqalVVnQL8A4+8Jai0STnHralTVZXkNcCHk7wH+AnD46zeBaxkuHNcASdW1W0ASc5huCPgTQx3CFzInwP/N8mrgXcyvFH5NIa7zV3UziFNhHcHlKTOOFUiSZ0xuCWpMwa3JHXG4JakzhjcktQZg1uSOmNwS1Jn/j+M39/Arsnx1wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.plot('target')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note we have some missing data in the target variable, we can drop these."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropped 3 Rows\n"
     ]
    }
   ],
   "source": [
    "data = data.drop_nan_subjects('target')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's lastly split our data in a train test split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performing test split on: 10393 subjects.\n",
      "random_state: 2\n",
      "Test split size: 0.2\n",
      "\n",
      "Performed train/test split\n",
      "Train size: 8314\n",
      "Test size:  2079\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div style=\"float: left; padding: 10px;\">\n",
       "        <h3>Data</h3><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.ant.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.ant.rh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.ant.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.ant.rh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.post.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.cingul.mid.post.rh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.frontomargin.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.frontomargin.rh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.occipital.inf.lh</th>\n",
       "      <th>smri_area_cort.destrieux_g.and.s.occipital.inf.rh</th>\n",
       "      <th>...</th>\n",
       "      <th>smri_vol_subcort.aseg_pallidum.rh</th>\n",
       "      <th>smri_vol_subcort.aseg_putamen.lh</th>\n",
       "      <th>smri_vol_subcort.aseg_putamen.rh</th>\n",
       "      <th>smri_vol_subcort.aseg_subcorticalgrayvolume</th>\n",
       "      <th>smri_vol_subcort.aseg_supratentorialvolume</th>\n",
       "      <th>smri_vol_subcort.aseg_thalamus.proper.lh</th>\n",
       "      <th>smri_vol_subcort.aseg_thalamus.proper.rh</th>\n",
       "      <th>smri_vol_subcort.aseg_ventraldc.lh</th>\n",
       "      <th>smri_vol_subcort.aseg_ventraldc.rh</th>\n",
       "      <th>smri_vol_subcort.aseg_wholebrain</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1540.0</td>\n",
       "      <td>1921.0</td>\n",
       "      <td>1237.0</td>\n",
       "      <td>1211.0</td>\n",
       "      <td>939.0</td>\n",
       "      <td>1022.0</td>\n",
       "      <td>872.0</td>\n",
       "      <td>596.0</td>\n",
       "      <td>820.0</td>\n",
       "      <td>839.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1392.5</td>\n",
       "      <td>5471.6</td>\n",
       "      <td>5002.9</td>\n",
       "      <td>54112.0</td>\n",
       "      <td>9.738411e+05</td>\n",
       "      <td>6980.4</td>\n",
       "      <td>6806.6</td>\n",
       "      <td>3448.1</td>\n",
       "      <td>3372.7</td>\n",
       "      <td>1.099494e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2108.0</td>\n",
       "      <td>2583.0</td>\n",
       "      <td>1289.0</td>\n",
       "      <td>1295.0</td>\n",
       "      <td>1066.0</td>\n",
       "      <td>1328.0</td>\n",
       "      <td>907.0</td>\n",
       "      <td>843.0</td>\n",
       "      <td>1571.0</td>\n",
       "      <td>1056.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2102.4</td>\n",
       "      <td>6520.7</td>\n",
       "      <td>6929.8</td>\n",
       "      <td>71188.0</td>\n",
       "      <td>1.290405e+06</td>\n",
       "      <td>9091.3</td>\n",
       "      <td>8105.3</td>\n",
       "      <td>5058.5</td>\n",
       "      <td>5261.6</td>\n",
       "      <td>1.444690e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2196.0</td>\n",
       "      <td>2266.0</td>\n",
       "      <td>1012.0</td>\n",
       "      <td>1459.0</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>1398.0</td>\n",
       "      <td>944.0</td>\n",
       "      <td>924.0</td>\n",
       "      <td>1209.0</td>\n",
       "      <td>1159.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2030.0</td>\n",
       "      <td>6521.7</td>\n",
       "      <td>5647.1</td>\n",
       "      <td>61985.0</td>\n",
       "      <td>1.283405e+06</td>\n",
       "      <td>7470.7</td>\n",
       "      <td>7278.4</td>\n",
       "      <td>3924.8</td>\n",
       "      <td>3983.6</td>\n",
       "      <td>1.421171e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1537.0</td>\n",
       "      <td>1986.0</td>\n",
       "      <td>1151.0</td>\n",
       "      <td>1178.0</td>\n",
       "      <td>1182.0</td>\n",
       "      <td>1389.0</td>\n",
       "      <td>839.0</td>\n",
       "      <td>678.0</td>\n",
       "      <td>1250.0</td>\n",
       "      <td>1207.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1859.0</td>\n",
       "      <td>6599.7</td>\n",
       "      <td>6317.0</td>\n",
       "      <td>65182.0</td>\n",
       "      <td>1.135326e+06</td>\n",
       "      <td>8437.8</td>\n",
       "      <td>8259.8</td>\n",
       "      <td>3734.3</td>\n",
       "      <td>4159.9</td>\n",
       "      <td>1.263524e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1824.0</td>\n",
       "      <td>2095.0</td>\n",
       "      <td>893.0</td>\n",
       "      <td>1066.0</td>\n",
       "      <td>1067.0</td>\n",
       "      <td>1046.0</td>\n",
       "      <td>974.0</td>\n",
       "      <td>828.0</td>\n",
       "      <td>890.0</td>\n",
       "      <td>963.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1456.7</td>\n",
       "      <td>5929.8</td>\n",
       "      <td>5642.2</td>\n",
       "      <td>60637.0</td>\n",
       "      <td>1.096084e+06</td>\n",
       "      <td>7891.9</td>\n",
       "      <td>7439.4</td>\n",
       "      <td>3945.9</td>\n",
       "      <td>3831.0</td>\n",
       "      <td>1.218476e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11870</th>\n",
       "      <td>1583.0</td>\n",
       "      <td>1821.0</td>\n",
       "      <td>730.0</td>\n",
       "      <td>1040.0</td>\n",
       "      <td>709.0</td>\n",
       "      <td>872.0</td>\n",
       "      <td>938.0</td>\n",
       "      <td>745.0</td>\n",
       "      <td>789.0</td>\n",
       "      <td>825.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1610.9</td>\n",
       "      <td>6090.9</td>\n",
       "      <td>5444.8</td>\n",
       "      <td>59550.0</td>\n",
       "      <td>1.001272e+06</td>\n",
       "      <td>7993.5</td>\n",
       "      <td>7239.5</td>\n",
       "      <td>3899.4</td>\n",
       "      <td>4024.6</td>\n",
       "      <td>1.139532e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11871</th>\n",
       "      <td>1603.0</td>\n",
       "      <td>1841.0</td>\n",
       "      <td>899.0</td>\n",
       "      <td>1091.0</td>\n",
       "      <td>990.0</td>\n",
       "      <td>995.0</td>\n",
       "      <td>809.0</td>\n",
       "      <td>666.0</td>\n",
       "      <td>1155.0</td>\n",
       "      <td>844.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1664.6</td>\n",
       "      <td>7042.9</td>\n",
       "      <td>6654.0</td>\n",
       "      <td>61090.0</td>\n",
       "      <td>9.897016e+05</td>\n",
       "      <td>7113.5</td>\n",
       "      <td>6835.3</td>\n",
       "      <td>4029.6</td>\n",
       "      <td>3826.0</td>\n",
       "      <td>1.134203e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11872</th>\n",
       "      <td>1862.0</td>\n",
       "      <td>2245.0</td>\n",
       "      <td>1406.0</td>\n",
       "      <td>1502.0</td>\n",
       "      <td>882.0</td>\n",
       "      <td>1279.0</td>\n",
       "      <td>1105.0</td>\n",
       "      <td>1015.0</td>\n",
       "      <td>1256.0</td>\n",
       "      <td>960.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1856.8</td>\n",
       "      <td>6331.3</td>\n",
       "      <td>6366.1</td>\n",
       "      <td>64413.0</td>\n",
       "      <td>1.172208e+06</td>\n",
       "      <td>8123.0</td>\n",
       "      <td>7947.6</td>\n",
       "      <td>3893.0</td>\n",
       "      <td>4428.5</td>\n",
       "      <td>1.301402e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11873</th>\n",
       "      <td>1803.0</td>\n",
       "      <td>1888.0</td>\n",
       "      <td>967.0</td>\n",
       "      <td>1101.0</td>\n",
       "      <td>866.0</td>\n",
       "      <td>1128.0</td>\n",
       "      <td>1040.0</td>\n",
       "      <td>642.0</td>\n",
       "      <td>939.0</td>\n",
       "      <td>892.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1470.9</td>\n",
       "      <td>5730.4</td>\n",
       "      <td>5469.3</td>\n",
       "      <td>55505.0</td>\n",
       "      <td>1.040864e+06</td>\n",
       "      <td>6923.8</td>\n",
       "      <td>6459.8</td>\n",
       "      <td>3502.5</td>\n",
       "      <td>3674.0</td>\n",
       "      <td>1.150473e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11874</th>\n",
       "      <td>1957.0</td>\n",
       "      <td>1998.0</td>\n",
       "      <td>1142.0</td>\n",
       "      <td>1102.0</td>\n",
       "      <td>1144.0</td>\n",
       "      <td>1130.0</td>\n",
       "      <td>884.0</td>\n",
       "      <td>638.0</td>\n",
       "      <td>1122.0</td>\n",
       "      <td>819.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1586.3</td>\n",
       "      <td>6171.0</td>\n",
       "      <td>5573.6</td>\n",
       "      <td>59816.0</td>\n",
       "      <td>1.079887e+06</td>\n",
       "      <td>7665.4</td>\n",
       "      <td>5959.4</td>\n",
       "      <td>3736.0</td>\n",
       "      <td>4060.7</td>\n",
       "      <td>1.214126e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8314 rows × 269 columns</p>\n",
       "</div></div>\n",
       "<div style=\"float: left; padding: 10px;\">\n",
       "        <h3>Target</h3><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11870</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11871</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11872</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11873</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11874</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8314 rows × 1 columns</p>\n",
       "</div></div>\n",
       "<div style=\"float: left; padding: 10px;\">\n",
       "        <h3>Non Input</h3><div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>household.income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11870</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11871</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11872</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11873</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11874</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8314 rows × 1 columns</p>\n",
       "</div></div>\n"
      ],
      "text/plain": [
       "       smri_thick_cort.destrieux_g.and.s.frontomargin.lh  \\\n",
       "0                                                  2.643   \n",
       "2                                                  2.798   \n",
       "3                                                  2.570   \n",
       "6                                                  2.720   \n",
       "7                                                  2.561   \n",
       "...                                                  ...   \n",
       "11870                                              2.604   \n",
       "11871                                              2.665   \n",
       "11872                                              2.517   \n",
       "11873                                              2.806   \n",
       "11874                                              2.817   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.occipital.inf.lh  \\\n",
       "0                                                  2.597    \n",
       "2                                                  2.635    \n",
       "3                                                  3.008    \n",
       "6                                                  2.937    \n",
       "7                                                  2.711    \n",
       "...                                                  ...    \n",
       "11870                                              2.839    \n",
       "11871                                              2.915    \n",
       "11872                                              2.743    \n",
       "11873                                              2.835    \n",
       "11874                                              2.267    \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.paracentral.lh  \\\n",
       "0                                                 2.682   \n",
       "2                                                 2.620   \n",
       "3                                                 2.771   \n",
       "6                                                 2.678   \n",
       "7                                                 2.869   \n",
       "...                                                 ...   \n",
       "11870                                             2.642   \n",
       "11871                                             2.661   \n",
       "11872                                             2.607   \n",
       "11873                                             2.678   \n",
       "11874                                             2.639   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.subcentral.lh  \\\n",
       "0                                                3.016   \n",
       "2                                                2.963   \n",
       "3                                                3.116   \n",
       "6                                                3.226   \n",
       "7                                                3.079   \n",
       "...                                                ...   \n",
       "11870                                            3.017   \n",
       "11871                                            3.114   \n",
       "11872                                            3.210   \n",
       "11873                                            3.344   \n",
       "11874                                            2.805   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.transv.frontopol.lh  \\\n",
       "0                                                  2.776       \n",
       "2                                                  3.038       \n",
       "3                                                  2.753       \n",
       "6                                                  3.058       \n",
       "7                                                  3.022       \n",
       "...                                                  ...       \n",
       "11870                                              2.990       \n",
       "11871                                              2.968       \n",
       "11872                                              2.847       \n",
       "11873                                              2.975       \n",
       "11874                                              3.041       \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.cingul.ant.lh  \\\n",
       "0                                                3.012   \n",
       "2                                                2.948   \n",
       "3                                                3.137   \n",
       "6                                                3.185   \n",
       "7                                                3.059   \n",
       "...                                                ...   \n",
       "11870                                            3.119   \n",
       "11871                                            3.167   \n",
       "11872                                            2.954   \n",
       "11873                                            3.134   \n",
       "11874                                            2.867   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.cingul.mid.ant.lh  \\\n",
       "0                                                  2.894     \n",
       "2                                                  2.966     \n",
       "3                                                  3.222     \n",
       "6                                                  3.198     \n",
       "7                                                  3.108     \n",
       "...                                                  ...     \n",
       "11870                                              3.014     \n",
       "11871                                              3.058     \n",
       "11872                                              2.965     \n",
       "11873                                              3.425     \n",
       "11874                                              2.906     \n",
       "\n",
       "       smri_thick_cort.destrieux_g.and.s.cingul.mid.post.lh  \\\n",
       "0                                                  2.874      \n",
       "2                                                  2.728      \n",
       "3                                                  3.062      \n",
       "6                                                  2.848      \n",
       "7                                                  2.958      \n",
       "...                                                  ...      \n",
       "11870                                              2.871      \n",
       "11871                                              2.976      \n",
       "11872                                              2.846      \n",
       "11873                                              3.251      \n",
       "11874                                              3.049      \n",
       "\n",
       "       smri_thick_cort.destrieux_g.cingul.post.dorsal.lh  \\\n",
       "0                                                  2.865   \n",
       "2                                                  3.263   \n",
       "3                                                  3.315   \n",
       "6                                                  3.283   \n",
       "7                                                  3.114   \n",
       "...                                                  ...   \n",
       "11870                                              3.240   \n",
       "11871                                              3.355   \n",
       "11872                                              3.211   \n",
       "11873                                              3.288   \n",
       "11874                                              3.440   \n",
       "\n",
       "       smri_thick_cort.destrieux_g.cingul.post.ventral.lh  ...  \\\n",
       "0                                                  2.350   ...   \n",
       "2                                                  1.882   ...   \n",
       "3                                                  3.065   ...   \n",
       "6                                                  2.422   ...   \n",
       "7                                                  2.751   ...   \n",
       "...                                                  ...   ...   \n",
       "11870                                              2.254   ...   \n",
       "11871                                              2.168   ...   \n",
       "11872                                              2.741   ...   \n",
       "11873                                              2.535   ...   \n",
       "11874                                              2.123   ...   \n",
       "\n",
       "       smri_vol_subcort.aseg_cc.mid.anterior  \\\n",
       "0                                      396.9   \n",
       "2                                      336.7   \n",
       "3                                      432.3   \n",
       "6                                      403.1   \n",
       "7                                      398.5   \n",
       "...                                      ...   \n",
       "11870                                  366.9   \n",
       "11871                                  367.8   \n",
       "11872                                  472.6   \n",
       "11873                                  424.1   \n",
       "11874                                  417.5   \n",
       "\n",
       "       smri_vol_subcort.aseg_cc.anterior  smri_vol_subcort.aseg_wholebrain  \\\n",
       "0                                  546.9                      1.099494e+06   \n",
       "2                                  684.0                      1.444690e+06   \n",
       "3                                  720.6                      1.421171e+06   \n",
       "6                                  873.3                      1.263524e+06   \n",
       "7                                  786.8                      1.218476e+06   \n",
       "...                                  ...                               ...   \n",
       "11870                              761.9                      1.139532e+06   \n",
       "11871                              609.3                      1.134203e+06   \n",
       "11872                              855.6                      1.301402e+06   \n",
       "11873                              691.2                      1.150473e+06   \n",
       "11874                              863.2                      1.214126e+06   \n",
       "\n",
       "       smri_vol_subcort.aseg_latventricles  \\\n",
       "0                                   4693.2   \n",
       "2                                  13426.2   \n",
       "3                                   8375.3   \n",
       "6                                  12905.8   \n",
       "7                                  12127.9   \n",
       "...                                    ...   \n",
       "11870                              11129.1   \n",
       "11871                               2855.1   \n",
       "11872                               8278.4   \n",
       "11873                               6483.5   \n",
       "11874                               9234.5   \n",
       "\n",
       "       smri_vol_subcort.aseg_allventricles  \\\n",
       "0                                   6299.4   \n",
       "2                                  18810.3   \n",
       "3                                  11828.6   \n",
       "6                                  14878.8   \n",
       "7                                  14754.5   \n",
       "...                                    ...   \n",
       "11870                              14259.9   \n",
       "11871                               4925.1   \n",
       "11872                              10434.1   \n",
       "11873                               8978.0   \n",
       "11874                              11169.3   \n",
       "\n",
       "       smri_vol_subcort.aseg_intracranialvolume  \\\n",
       "0                                  1.354788e+06   \n",
       "2                                  1.703982e+06   \n",
       "3                                  1.679526e+06   \n",
       "6                                  1.514361e+06   \n",
       "7                                  1.586405e+06   \n",
       "...                                         ...   \n",
       "11870                              1.480336e+06   \n",
       "11871                              1.470497e+06   \n",
       "11872                              1.455727e+06   \n",
       "11873                              1.480286e+06   \n",
       "11874                              1.500072e+06   \n",
       "\n",
       "       smri_vol_subcort.aseg_supratentorialvolume  \\\n",
       "0                                    9.738411e+05   \n",
       "2                                    1.290405e+06   \n",
       "3                                    1.283405e+06   \n",
       "6                                    1.135326e+06   \n",
       "7                                    1.096084e+06   \n",
       "...                                           ...   \n",
       "11870                                1.001272e+06   \n",
       "11871                                9.897016e+05   \n",
       "11872                                1.172208e+06   \n",
       "11873                                1.040864e+06   \n",
       "11874                                1.079887e+06   \n",
       "\n",
       "       smri_vol_subcort.aseg_subcorticalgrayvolume  sex  household.income  \n",
       "0                                          54112.0    0                 2  \n",
       "2                                          71188.0    1                 1  \n",
       "3                                          61985.0    1                 1  \n",
       "6                                          65182.0    1                 0  \n",
       "7                                          60637.0    1                 0  \n",
       "...                                            ...  ...               ...  \n",
       "11870                                      59550.0    1                 1  \n",
       "11871                                      61090.0    0                 1  \n",
       "11872                                      64413.0    0                 1  \n",
       "11873                                      55505.0    0                 0  \n",
       "11874                                      59816.0    0                 2  \n",
       "\n",
       "[8314 rows x 271 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data, test_data = data.test_split(size=.2, random_state=2)\n",
    "train_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating Models\n",
    "\n",
    "We will start by evaluating some different choices of pipelines / models on just our training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ProblemSpec(n_jobs=16, scorer=['roc_auc'])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ps = bp.ProblemSpec(scorer=['roc_auc'],\n",
    "                    n_jobs=16)\n",
    "ps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ModelPipeline\n",
      "-------------\n",
      "imputers=\\\n",
      "Imputer(obj='default')\n",
      "\n",
      "scalers=\\\n",
      "Scaler(obj='standard')\n",
      "\n",
      "model=\\\n",
      "Model(obj='dt')\n",
      "\n",
      "param_search=\\\n",
      "None\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model_pipeline = bp.ModelPipeline(model=bp.Model('dt'))\n",
    "model_pipeline.print_all()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the their are a few default values, specifically we have a set of default imputers, one for replacing all float variables with the mean value, and one for replacing all categorical / binary variables (if any, otherwise ignored) with the median values.\n",
    "\n",
    "Next, we have a just standard scaler, which scales all features to have mean 0, std of 1.\n",
    "\n",
    "Then, we have our decision tree.\n",
    "\n",
    "Lastly, we have no param_search specified."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have an initial model, we are ready to use the Evaluate function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "88ee7bcaba0d43f1867b79517de12ce0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Folds:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "BPtEvaluator\n",
       "------------\n",
       "mean_scores = {'roc_auc': 0.652643152409617}\n",
       "std_scores = {'roc_auc': 0.0032142396653817864}\n",
       "\n",
       "Saved Attributes: ['estimators', 'preds', 'timing', 'train_subjects', 'val_subjects', 'feat_names', 'ps', 'mean_scores', 'std_scores', 'weighted_mean_scores', 'scores', 'fis_', 'feature_importances_']\n",
       "\n",
       "Avaliable Methods: ['get_X_transform_df', 'get_preds_dfs', 'get_fis', 'get_feature_importances', 'permutation_importance']\n",
       "\n",
       "Evaluated with:\n",
       "ProblemSpec(n_jobs=16, problem_type='binary',\n",
       "            scorer={'roc_auc': make_scorer(roc_auc_score, needs_threshold=True)},\n",
       "            subjects='all', target='sex')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = bp.evaluate(pipeline=model_pipeline,\n",
    "                      dataset=train_data,\n",
    "                      problem_spec=ps,\n",
    "                      cv=5)\n",
    "\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try a just linear model now (Logistic Regression, since binary), updating our model within our model_pipeline first."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7bff10e9d767491cac5641115c604164",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Folds:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "BPtEvaluator\n",
       "------------\n",
       "mean_scores = {'roc_auc': 0.904121897548382}\n",
       "std_scores = {'roc_auc': 0.006991688270369848}\n",
       "\n",
       "Saved Attributes: ['estimators', 'preds', 'timing', 'train_subjects', 'val_subjects', 'feat_names', 'ps', 'mean_scores', 'std_scores', 'weighted_mean_scores', 'scores', 'fis_', 'coef_']\n",
       "\n",
       "Avaliable Methods: ['get_X_transform_df', 'get_preds_dfs', 'get_fis', 'get_coef_', 'permutation_importance']\n",
       "\n",
       "Evaluated with:\n",
       "ProblemSpec(n_jobs=16, problem_type='binary',\n",
       "            scorer={'roc_auc': make_scorer(roc_auc_score, needs_threshold=True)},\n",
       "            subjects='all', target='sex')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_pipeline.model = bp.Model('linear')\n",
    "\n",
    "results = bp.evaluate(pipeline=model_pipeline,\n",
    "                      dataset=train_data,\n",
    "                      problem_spec=ps,\n",
    "                      cv=5)\n",
    "\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Examing Evaluation Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The returned BPtEvaluator, which we store in variable results, has a bunch of different extra functionality built in for further examining the results of the evaluation. We will explore some of those functions here.\n",
    "\n",
    "We can look fisrt at for example the raw predictions made:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predict</th>\n",
       "      <th>predict_proba_0</th>\n",
       "      <th>predict_proba_1</th>\n",
       "      <th>decision_function</th>\n",
       "      <th>y_true</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.936433</td>\n",
       "      <td>0.063567</td>\n",
       "      <td>-2.689987</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.044796</td>\n",
       "      <td>0.955204</td>\n",
       "      <td>3.059801</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.114142</td>\n",
       "      <td>0.885858</td>\n",
       "      <td>2.049114</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.122291</td>\n",
       "      <td>0.877709</td>\n",
       "      <td>1.970911</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.025838</td>\n",
       "      <td>0.974162</td>\n",
       "      <td>3.629715</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11837</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.412130</td>\n",
       "      <td>0.587870</td>\n",
       "      <td>0.355167</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11841</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.853139</td>\n",
       "      <td>0.146861</td>\n",
       "      <td>-1.759439</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11849</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.484163</td>\n",
       "      <td>0.515837</td>\n",
       "      <td>0.063370</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11857</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.988427</td>\n",
       "      <td>0.011573</td>\n",
       "      <td>-4.447442</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11873</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.989396</td>\n",
       "      <td>0.010604</td>\n",
       "      <td>-4.535859</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1663 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       predict  predict_proba_0  predict_proba_1  decision_function  y_true\n",
       "0          0.0         0.936433         0.063567          -2.689987     0.0\n",
       "3          1.0         0.044796         0.955204           3.059801     1.0\n",
       "6          1.0         0.114142         0.885858           2.049114     1.0\n",
       "7          1.0         0.122291         0.877709           1.970911     1.0\n",
       "15         1.0         0.025838         0.974162           3.629715     1.0\n",
       "...        ...              ...              ...                ...     ...\n",
       "11837      1.0         0.412130         0.587870           0.355167     1.0\n",
       "11841      0.0         0.853139         0.146861          -1.759439     1.0\n",
       "11849      1.0         0.484163         0.515837           0.063370     0.0\n",
       "11857      0.0         0.988427         0.011573          -4.447442     0.0\n",
       "11873      0.0         0.989396         0.010604          -4.535859     0.0\n",
       "\n",
       "[1663 rows x 5 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = results.get_preds_dfs()\n",
    "\n",
    "# Just first fold\n",
    "preds[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sometimes it can be useful to look at predictions made as resitricted to only a group of subjects. Here's where we can use that household income information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: '[<50K]', 1: '[>=100K]', 2: '[>=50K & <100K]'}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# See how these values are coded\n",
    "train_data.encoders['household.income']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predict</th>\n",
       "      <th>predict_proba_0</th>\n",
       "      <th>predict_proba_1</th>\n",
       "      <th>decision_function</th>\n",
       "      <th>y_true</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2049</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.051997</td>\n",
       "      <td>0.948003</td>\n",
       "      <td>2.903164</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.114142</td>\n",
       "      <td>0.885858</td>\n",
       "      <td>2.049114</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.122291</td>\n",
       "      <td>0.877709</td>\n",
       "      <td>1.970911</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6154</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.939120</td>\n",
       "      <td>0.060880</td>\n",
       "      <td>-2.736043</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10251</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.011423</td>\n",
       "      <td>0.988577</td>\n",
       "      <td>4.460610</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8171</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.020307</td>\n",
       "      <td>0.979693</td>\n",
       "      <td>3.876290</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2032</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.979160</td>\n",
       "      <td>0.020840</td>\n",
       "      <td>-3.849802</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4082</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.026987</td>\n",
       "      <td>0.973013</td>\n",
       "      <td>3.585060</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4089</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.042656</td>\n",
       "      <td>0.957344</td>\n",
       "      <td>3.111002</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6140</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.307029</td>\n",
       "      <td>0.692971</td>\n",
       "      <td>0.814046</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>460 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       predict  predict_proba_0  predict_proba_1  decision_function  y_true\n",
       "2049       1.0         0.051997         0.948003           2.903164     1.0\n",
       "6          1.0         0.114142         0.885858           2.049114     1.0\n",
       "7          1.0         0.122291         0.877709           1.970911     1.0\n",
       "6154       0.0         0.939120         0.060880          -2.736043     0.0\n",
       "10251      1.0         0.011423         0.988577           4.460610     1.0\n",
       "...        ...              ...              ...                ...     ...\n",
       "8171       1.0         0.020307         0.979693           3.876290     1.0\n",
       "2032       0.0         0.979160         0.020840          -3.849802     0.0\n",
       "4082       1.0         0.026987         0.973013           3.585060     1.0\n",
       "4089       1.0         0.042656         0.957344           3.111002     1.0\n",
       "6140       1.0         0.307029         0.692971           0.814046     1.0\n",
       "\n",
       "[460 rows x 5 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# First we want to get just the subset of subjects\n",
    "# from let's say the first fold and just under 50K\n",
    "fold_preds = preds[0]\n",
    "val_subjs = fold_preds.index\n",
    "vs = bp.ValueSubset('household.income', '[<50K]', decode_values=True)\n",
    "\n",
    "# Specify the intersection of those subsets of subjects\n",
    "subjs = bp.Intersection([val_subjs, vs])\n",
    "\n",
    "# Get the specific subject values\n",
    "subset_subjects = train_data.get_subjects(subjs)\n",
    "subset_preds = fold_preds.loc[subset_subjects]\n",
    "\n",
    "subset_preds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's say we want to look at roc auc on just this subset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8824987132808478"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "roc_auc_score(subset_preds['y_true'], subset_preds['predict_proba_1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One thing to note about post-stratify predictions by a group is that it is just a diagnostic tool. For example if we found that a sub group did much worse, it lets us know about the problem, but doesn't address it.\n",
    "\n",
    "That said, the above code may be useful for getting more famillar with the different internal saved attributes of the BPtEvaluator, but is it the easiest way to get this breakdown? No. Actually their is a dedicated function to breaking down results by a subset, let's check it out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['[>=50K & <100K]', '[>=100K]', '[<50K]']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets = results.subset_by(group='household.income', dataset=train_data)\n",
    "list(subsets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BPtEvaluatorSubset(household.income=[<50K])\n",
       "------------\n",
       "mean_scores = {'roc_auc': 0.8927459075402938}\n",
       "std_scores = {'roc_auc': 0.01241167653252817}\n",
       "\n",
       "Saved Attributes: ['estimators', 'preds', 'timing', 'train_subjects', 'val_subjects', 'feat_names', 'ps', 'mean_scores', 'std_scores', 'weighted_mean_scores', 'scores', 'fis_', 'coef_']\n",
       "\n",
       "Avaliable Methods: ['get_X_transform_df', 'get_preds_dfs', 'get_fis', 'get_coef_', 'permutation_importance']\n",
       "\n",
       "Evaluated with:\n",
       "ProblemSpec(n_jobs=16, problem_type='binary',\n",
       "            scorer={'roc_auc': make_scorer(roc_auc_score, needs_threshold=True)},\n",
       "            subjects='all', target='sex')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets['[<50K]']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each of these objects can be treated the same as the main BPtEvaluator object, except with essentially a subset of validation subjects. I.e., let's look at the roc_auc we calculated vs. the saved one here for fold 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8824987132808478"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subsets['[<50K]'].scores['roc_auc'][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What if we wanted to say plot a confusion matrix? Well it seems like scikit-learn has a method dedicated to that, let's see if we can use it.\n",
    "\n",
    "https://scikit-learn.org/stable/modules/generated/sklearn.metrics.plot_confusion_matrix.html\n",
    "\n",
    "So for this function we need a trained estimator and then the validation X and y, let's grab those for just the first fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa6c757e3a0>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import plot_confusion_matrix\n",
    "\n",
    "fold = 0\n",
    "\n",
    "estimator = results.estimators[fold]\n",
    "\n",
    "X, y = train_data.get_Xy(ps=results.ps,\n",
    "                         subjects=results.val_subjects[fold])\n",
    "\n",
    "plot_confusion_matrix(estimator, X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How would this change if we wanted to just plot the confusion matrix for that subset of subjects we looked at before? We just need to specify a different set of subjects, which we already calculated, so..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7fa6c7719be0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X, y = train_data.get_Xy(ps=results.ps,\n",
    "                         subjects=subjs)\n",
    "\n",
    "plot_confusion_matrix(estimator, X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or of course we could just the the Subset evaluator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also look at feature importances as averaged across all 5 folds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "smri_vol_subcort.aseg_caudate.rh                   -0.491889\n",
       "smri_vol_subcort.aseg_thalamus.proper.lh           -0.469694\n",
       "smri_thick_cort.destrieux_g.postcentral.rh         -0.393656\n",
       "smri_vol_subcort.aseg_cerebellum.white.matter.rh   -0.352483\n",
       "smri_area_cort.destrieux_g.temp.sup.lateral.rh     -0.345213\n",
       "                                                      ...   \n",
       "smri_vol_subcort.aseg_putamen.rh                    0.328204\n",
       "smri_vol_subcort.aseg_thalamus.proper.rh            0.364399\n",
       "smri_vol_subcort.aseg_cerebellum.cortex.rh          0.442560\n",
       "smri_vol_subcort.aseg_intracranialvolume            0.688781\n",
       "smri_vol_subcort.aseg_cerebral.white.matter.rh      0.703118\n",
       "Length: 269, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.get_fis(mean=True).sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LinearResidualizer\n",
    "\n",
    "What we find here is a bit trivial. Basically just boys have bigger brains than girls ... That said, this is just an example. What if we say residualize in a nested way for intracranial volume?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ModelPipeline\n",
      "-------------\n",
      "imputers=\\\n",
      "Imputer(obj='default')\n",
      "\n",
      "scalers=\\\n",
      "[Scaler(obj='robust'),\n",
      " Scaler(obj=LinearResidualizer(to_resid_df=       smri_vol_subcort.aseg_intracranialvolume\n",
      "0                                  1.354788e+06\n",
      "2                                  1.703982e+06\n",
      "3                                  1.679526e+06\n",
      "4                                  1.561216e+06\n",
      "6                                  1.514361e+06\n",
      "...                                         ...\n",
      "11870                              1.480336e+06\n",
      "11871                              1.470497e+06\n",
      "11872                              1.455727e+06\n",
      "11873                              1.480286e+06\n",
      "11874                              1.500072e+06\n",
      "\n",
      "[10393 rows x 1 columns]))]\n",
      "\n",
      "model=\\\n",
      "Model(obj='linear')\n",
      "\n",
      "param_search=\\\n",
      "None\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from BPt.extensions import LinearResidualizer\n",
    "\n",
    "resid = LinearResidualizer(to_resid_df=data[['smri_vol_subcort.aseg_intracranialvolume']])\n",
    "resid_scaler = bp.Scaler(resid, scope='float')\n",
    "\n",
    "\n",
    "resid_pipeline = bp.ModelPipeline(scalers=[bp.Scaler('robust'), resid_scaler],\n",
    "                                  model=bp.Model('linear'))   \n",
    "\n",
    "resid_pipeline.print_all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3dc9d98d8da5462a9e2bfc63b9a5608a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Folds:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "BPtEvaluator\n",
       "------------\n",
       "mean_scores = {'roc_auc': 0.904121897548382}\n",
       "std_scores = {'roc_auc': 0.006991688270369848}\n",
       "\n",
       "Saved Attributes: ['estimators', 'preds', 'timing', 'train_subjects', 'val_subjects', 'feat_names', 'ps', 'mean_scores', 'std_scores', 'weighted_mean_scores', 'scores', 'fis_', 'coef_']\n",
       "\n",
       "Avaliable Methods: ['get_X_transform_df', 'get_preds_dfs', 'get_fis', 'get_coef_', 'permutation_importance']\n",
       "\n",
       "Evaluated with:\n",
       "ProblemSpec(n_jobs=16, problem_type='binary',\n",
       "            scorer={'roc_auc': make_scorer(roc_auc_score, needs_threshold=True)},\n",
       "            subjects='all', target='sex')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = bp.evaluate(pipeline=model_pipeline,\n",
    "                      dataset=train_data,\n",
    "                      problem_spec=ps,\n",
    "                      cv=5)\n",
    "\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "smri_vol_subcort.aseg_caudate.rh                   -0.491889\n",
       "smri_vol_subcort.aseg_thalamus.proper.lh           -0.469694\n",
       "smri_thick_cort.destrieux_g.postcentral.rh         -0.393656\n",
       "smri_vol_subcort.aseg_cerebellum.white.matter.rh   -0.352483\n",
       "smri_area_cort.destrieux_g.temp.sup.lateral.rh     -0.345213\n",
       "                                                      ...   \n",
       "smri_vol_subcort.aseg_putamen.rh                    0.328204\n",
       "smri_vol_subcort.aseg_thalamus.proper.rh            0.364399\n",
       "smri_vol_subcort.aseg_cerebellum.cortex.rh          0.442560\n",
       "smri_vol_subcort.aseg_intracranialvolume            0.688781\n",
       "smri_vol_subcort.aseg_cerebral.white.matter.rh      0.703118\n",
       "Length: 269, dtype: float64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.get_fis(mean=True).sort_values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notably residualizing is far from perfect..., it is interesting though how the results change when we add the residualization. \n",
    "\n",
    "## Default Pipelines\n",
    "\n",
    "\n",
    "We can just ignore the issue for now, and explore some different pipelines (not residualizing anymore). We are going to just try some off the shelf default pipelines for simplicity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['elastic_pipe', 'ridge_pipe', 'lgbm_pipe', 'svm_pipe', 'stacking_pipe', 'compare_pipe']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[Imputer(obj='mean', scope='float'),\n",
       "                Imputer(obj='median', scope='category'), Scaler(obj='robust'),\n",
       "                Transformer(obj='one hot encoder', scope='category'),\n",
       "                Model(obj='elastic',\n",
       "                      param_search=ParamSearch(cv=CV(cv_strategy=CVStrategy()),\n",
       "                                               n_iter=60),\n",
       "                      params=1)])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from BPt.default.pipelines import pipelines\n",
    "\n",
    "# Look at choices\n",
    "print(list(pipelines))\n",
    "\n",
    "# Look at the pipeline\n",
    "pipelines['elastic_pipe']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7f509a3864ae437bb6b88535cae37c61",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Folds:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "BPtEvaluator\n",
       "------------\n",
       "mean_scores = {'roc_auc': 0.9050843516449291}\n",
       "std_scores = {'roc_auc': 0.006520964845338212}\n",
       "\n",
       "Saved Attributes: ['estimators', 'preds', 'timing', 'train_subjects', 'val_subjects', 'feat_names', 'ps', 'mean_scores', 'std_scores', 'weighted_mean_scores', 'scores', 'fis_', 'coef_']\n",
       "\n",
       "Avaliable Methods: ['get_X_transform_df', 'get_preds_dfs', 'get_fis', 'get_coef_', 'permutation_importance']\n",
       "\n",
       "Evaluated with:\n",
       "ProblemSpec(n_jobs=16, problem_type='binary',\n",
       "            scorer={'roc_auc': make_scorer(roc_auc_score, needs_threshold=True)},\n",
       "            subjects='all', target='sex')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = bp.evaluate(pipeline=pipelines['elastic_pipe'],\n",
    "                      dataset=train_data,\n",
    "                      problem_spec=ps,\n",
    "                      cv=5)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[Imputer(obj='mean', scope='float'),\n",
       "                Imputer(obj='median', scope='category'), Scaler(obj='robust'),\n",
       "                Transformer(obj='one hot encoder', scope='category'),\n",
       "                Model(obj='lgbm',\n",
       "                      param_search=ParamSearch(cv=CV(cv_strategy=CVStrategy()),\n",
       "                                               n_iter=60),\n",
       "                      params=1)])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Look at the pipeline\n",
    "pipelines['lgbm_pipe']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8ccd359bd507458699d5779fd5bb5595",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Folds:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "BPtEvaluator\n",
       "------------\n",
       "mean_scores = {'roc_auc': 0.8810651333645121, 'balanced_accuracy': 0.8031876349839246}\n",
       "std_scores = {'roc_auc': 0.010968292470025738, 'balanced_accuracy': 0.011458887286564062}\n",
       "\n",
       "Saved Attributes: ['estimators', 'preds', 'timing', 'train_subjects', 'val_subjects', 'feat_names', 'ps', 'mean_scores', 'std_scores', 'weighted_mean_scores', 'scores', 'fis_', 'feature_importances_']\n",
       "\n",
       "Avaliable Methods: ['get_X_transform_df', 'get_preds_dfs', 'get_fis', 'get_feature_importances', 'permutation_importance']\n",
       "\n",
       "Evaluated with:\n",
       "ProblemSpec(n_jobs=16, problem_type='binary',\n",
       "            scorer={'balanced_accuracy': make_scorer(balanced_accuracy_score),\n",
       "                    'roc_auc': make_scorer(roc_auc_score, needs_threshold=True)},\n",
       "            subjects='all', target='sex')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = bp.evaluate(pipeline=pipelines['lgbm_pipe'],\n",
    "                      dataset=train_data,\n",
    "                      problem_spec=ps,\n",
    "                      scorer=['roc_auc', 'balanced_accuracy'],\n",
    "                      cv=5)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Employ Test Set\n",
    "\n",
    "How about now applying the test set, which can give us another estimate of generalizibility. One good strategy is re-train one model on the full training set, then we can apply it to the testing set, using say the elastic net based model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.906483521992028"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "# Get as a sklearn-style estimator\n",
    "estimator = pipelines['elastic_pipe'].build(train_data, ps)\n",
    "\n",
    "# Get train data\n",
    "X_train, y_train = train_data.get_Xy(ps)\n",
    "\n",
    "# Fit on train data\n",
    "estimator.fit(X_train, y_train)\n",
    "\n",
    "# Get test data\n",
    "X_test, y_test = test_data.get_Xy(ps)\n",
    "\n",
    "# Get test predictions\n",
    "test_preds = estimator.predict_proba(X_test)\n",
    "\n",
    "# Get roc_auc_score\n",
    "roc_auc_score(y_test, test_preds[:, 1])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.1 64-bit ('bpt': conda)",
   "language": "python",
   "name": "python39164bitbptconda7805b3f5d58e4b658b79cb94739371e6"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
